<?xml version="1.0" encoding="UTF-8" ?>
<?xml-stylesheet type="text/css" href="Release-Notes.css"?>
<!DOCTYPE release-history PUBLIC "-//UniTime//UniTime Release Notes DTD/EN" "Release-Notes.dtd">
<!--
 * Licensed to The Apereo Foundation under one or more contributor license
 * agreements. See the NOTICE file distributed with this work for
 * additional information regarding copyright ownership.
 *
 * The Apereo Foundation licenses this file to you under the Apache License,
 * Version 2.0 (the "License"); you may not use this file except in
 * compliance with the License. You may obtain a copy of the License at:
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 *
 * See the License for the specific language governing permissions and
 * limitations under the License.
 *
 -->

<release-history>

<doc-title>UniTime 4.4 Release Notes</doc-title>
<release>
	<version>4.4.${build.number}</version>
	<release-date>${build.date}</release-date>
	<category>
		<title>Student Scheduling</title>
		<item>
			<name>Course Requests: Submit Requests</name>
			<description>
				<line>Ensure that the save-requests action gets logged when the online student scheduling is disabled (no online student scheduling server is running).</line>
 			</description>
		</item>
		<item>
			<name>Course Requests: Custom Validation</name>
			<description>
				<line>When updating request note, do not check the scheduling status of the session.
					<line>Course request changes may be done at a time when the online student scheduling is not accepting scheduling changes.</line>
				</line>
 			</description>
		</item>
		<item>
			<name>Online Student Scheduling: Asynchronous Execution</name>
			<description>
				<line>Added ability to use multiple threads for asynchronous execution.
					<line>Set unitime.enrollment.server.asyncPoolSize for the thread pool size (defaults to 10).</line>
				</line>
 			</description>
		</item>
		<item>
			<name>Reservations: Start Date</name>
			<description>
				<line>Added ability to provide start date on a reservation.
					<line>A reservation is also considered expaired (does not reserve any space) when today is BEFORE the start date.</line>
				</line>
 			</description>
		</item>
		<item>
			<name>Student Scheduling Assistant: Inactive Course Requests</name>
			<description>
				<line>A course request is marked as inactive when it is saved in the database, but the student (that has a class schedule) is not enrolled in the course.</line>
				<line>Inactive courses are NOT listed as not-assigned on the Class List page.</line>
				<line>Inactive coruses are indicated on the Course Requests table (as dark red color, line-through and italic font).
					<line>A course can be activated by using the finder dialog or making changes to it (including just selecting on amoung suggestions).</line>
					<line>There is a new icon for reactivating an inactive course (universal recycling symbol).</line>
				</line>
				<line>When a new schedule is build (Build Schedule button), inactive courses are ignored (left not-assigned).
					<line>Unless the Rearrange Schedule button is clicked.</line>
					<line>Also do not consider inactive courses when computing suggestions.</line>
				</line>
				<line>Using + New Course will always put the new course at the bottom (even if it was present on among course requests as inactive before).</line>
				<line>It is possible to add a new course without removing inactive (having a course listed two times would not trigger an error if one of them is not active).</line>
				<line>These &quot;inactive&quot; course requests are not detected/indicated by default, but this feature must be enabled with the following property
					<line>unitime.enrollment.inactiveUnassignedRequests=true (students)</line>
					<line>unitime.enrollment.inactiveUnassignedRequests.manager (advisors and admins).</line>
				</line>
			</description>
		</item>
		<item>
			<name>Online Scheduling Dashboard: Change Log</name>
			<description>
				<line>Unless the filter checks for operation:
					<line>Do not show validate-overrides, banner-update, and critical-courses actions that did not make any changes (result is False).</line>
					<line>Do not show reload-student, reload-offering, and check-offering actions with no result filled in.</line>
				</line>
				<line>Order the results by log unique id (instead of timestamp; a little less precise, but much faster).</line>
				<line>Message column: set white-space to pre-wrap to improve display of multi-line messages.</line>
			</description>
		</item>
		<item>
			<name>Online Student Scheduling Dashboard: Filter</name>
			<description>
				<line>Fixed an issue with hiding students that only have free time requests.</line>
				<line>Improved boolean query capabilities of the filter, for instance
					<line>(group:PREREG and not group:ENH-3)</line>
				</line>
				<line>Will return all students from the PREREG group that are NOT in the ENH-3 group.</line>
 			</description>
		</item>
		<item>
			<name>Online Student Scheduling: Check Assignment</name>
			<description>
				<line>When counting unreserved space: only check reservations that are set directly on the configuration/section in question.</line>
			</description>
		</item>
		<item>
			<name>Online Student Scheduling: Not-Assigned Course Request Message</name>
			<description>
				<line>Besides of the course availability and time conflicts, also check the max credit hours.</line>
				<line>Display "Exceeds maximum of X credit hours." when the not-assigned course request would get the student over the max credit limit
					(where X is the current max credit for the student).</line>
			</description>
		</item>
		<item>
			<name>Batch Student Scheduling: Curriculum Reservations</name>
			<description>
				<line>Fixed a problem with curriculum reservations not counting matching students that are already enrolled and that are excluded from the run.</line>
			</description>
		</item>
		<item>
			<name>Published Schedule Runs: Config &amp; Notes</name>
			<description>
				<line>Added solver configuration on the published run.</line>
				<line>Added ability to put in a note.</line>
			</description>
		</item>
		<item>
			<name>Online Student Scheduling: Change Log</name>
			<description>
				<line>Student Email: improved logging (include recepient email address, show more details in the Change Log, etc.).
					<line>Also, do not fail when CC address is incorrect (log a warning instead).</line>
				</line>
			</description>
		</item>
	</category>
	<category>
		<title>Course Timetabling</title>
		<item>
			<name>Class Assigment: Student Conflicts</name>
			<description>
				<line>Added ability to change the default of how the student conflicts are computed.</line>
				<line>Application configuration tmtbl.classAssign.studentConflicts with the possible values:
					<line>auto: show the actual student conflicts when there are student class enrollments, show projected (solution) conflicts otherwise (this is the default)</line>
					<line>actual: always show the actual student conflicts</line>
					<line>solution: always show the projected (solution) student conflicts</line>
					<line>none: do not show student conflicts in the Available Times table</line>
				</line>
				<line>It is now possible to switch between the two modes (actual/projected) student conflicts by clicking the note at the bottom of the Student Conflicts table, which now reads:
					<line>Showing the actual student class enrollments, click here to change to projected student conflicts.</line>
				</line>
				<line>or
					<line>Showing projected student conflicts, click here to change to the actual class enrollments.</line>
				</line>
 			</description>
		</item>
	</category>
	<category>
		<title>Examination Timetabling</title>
		<item>
			<name>Examination Assignment: Same Days</name>
			<description>
				<line>Added Same Days constraint checking.</line>
				<line>Fixed an issue with the DistributionConflict comparator (when two constraints with different number of exams are compared).</line>
			</description>
		</item>
		<item>
			<name>Examination Name: T for course title</name>
			<description>
				<line>Added ability to include course title in the examination name (using %T).</line>
			</description>
		</item>
	</category>
	<category>
		<title>CPSolver updated to version 1.3.189 (was 1.3.185)</title>
		<item>
				<name>Examination Timetabling: More Than One Exam A Day</name>
				<description>
						<line>Added the ability to set a penalty when a student has two exams or more a day.
							<line>To enable add org.cpsolver.exam.criteria.additional.StudentMoreThan1ADayConflicts to Exam Additional Criteria.</line>
							<line>More than one exam a day student conflict weight can be set by problem property Exams.MoreThanOneADayWeight.</line>
						</line>
				</description>
		</item>
		<item>
			<name>Course Timetabling: Back-To-Back/Following Weeks</name>
			<description>
				<line>Added Back-To-Back Weeks distribution constraint.
					<line>Given classes must be taught on weeks that are back-to-back (the gap between the two assigned date patterns is less than a week).</line>
					<line>When prohibited or (strongly) discouraged: any two classes must have at least a week gap in between.</line>
				</line>
				<line>Added Following Weeks distribution constraint.
					<line>Given classes must be taught on weeks that are back-to-back and in the given order.</line>
					<line>When prohibited or (strongly) discouraged: given classes must be taught on weeks in the given order with at least one week between any two following classes.</line>
				</line>
			</description>
		</item>
		<item>
			<name>Online Student Scheduling: Suggestions</name>
			<description>
				<line>Consider order of the courses within a course request when comparing two suggestions.</line>
			</description>
		</item>
	</category>
	<category>
		<title>Administration</title>
		<item>
			<name>Chameleon: Session Administrators</name>
			<description>
				<line>When the chameleon page is used by session dependent users (e.g., session admins),
					only allow authorities from the academic session(s) for which the original user has Chameleon permission.</line>
				<line>This is to prevent a session admin to chameleon into another session admin from a different academic session.</line>
			</description>
		</item>
		<item>
			<name>HQL Reports: Export XLS</name>
			<description>
				<line>Added ability to export HQL reports to XLS format.</line>
			</description>
		</item>
	</category>
	<category>
		<title>Other</title>
		<item>
			<name>PostgreSQL</name>
			<description>
				<line>Added support for PostgreSQL.</line>
				<line>See http://help.unitime.org/PostgreSQL for more details.</line>
			</description>
		</item>
	</category>
</release>

<release>
	<version>4.4.130</version>
	<release-date>Sat, 5 Oct 2019</release-date>
	<category>
		<title>Student Scheduling</title>
		<item>
			<name>Student Scheduling: Advisors</name>
			<description>
				<line>Show student's advisor(s) on the dashboard page (Students tab) and in the Enrollments tables.</line>
				<line>Added ability to filter by advisor on the dashboard page.</line>
				<line>People Lookup: Added ability to check advisors when looking up a person. Added ability to use people lookup to fill in advisor details.</line>
 			</description>
		</item>
		<item>
			<name>Course Finder: Select All</name>
			<description>
				<line>Added Select All button.</line>
				<line>Only visible when there is a match on UCC attribute (custom course lookup).</line>
				<line>When clicked, all courses are selected (limited to 10) in a random order favoring courses with more available space.</line>
				<line>It is possible to choose the selection mode (availability, limit, or snapshot).</line>
				<line>It is possible to define whether a random selection will be used (or the courses will be just listed in the given order).</line>
				<line>It is possible to define the maximal number of returned courses.</line>
				<line>The following application properties are used:
					<line>unitime.enrollment.listOfferings.selectionMode=availability|limit|snapshot (defaults to availability)</line>
					<line>unitime.enrollment.listOfferings.rouletteWheel=true</line>
					<line>unitime.enrollment.listOfferings.limit=10</line>
				</line>
				<line>If not all courses are going to be selected, rename the button to Pick {N} where N is the number of courses that will be selected.</line>
 			</description>
		</item>
		<item>
			<name>Course Finder: List of Classes</name>
			<description>
				<line>Do not list classe for users that have no role (students) during pre-registration when the class schedule has not been published yet.</line>
			</description>
		</item>
		<item>
			<name>Course Requests: Custom Course Request Validation</name>
			<description>
				<line>Request Overrides: added ability to provide request note.</line>
				<line>Course request validation (when submitting the Course Requests page): for all new registration errors, check if the override is allowed.
					<line>Using the response message (response.overrides) and prohibited overrides on the course that is being requested.</line>
				</line>
				<line>Created a simplified implementation that can be used while the class schedule has not been published yet (eligiblity checking but no course request validation).</line>
			</description>
		</item>
		<item>
			<name>Course Requests: Critical Course Override</name>
			<description>
				<line>Added ability to override critical course flag on the Online Student Scheduling Dashboard.</line>
				<line>Permission Student Scheduling Change Critical Override is needed.</line>
			</description>
		</item>
		<item>
			<name>Batch Student Scheduling: XE Save</name>
			<description>
				<line>Enroll students with CLOS overrides last (students with an override reservation that allows over the limit).</line>
				<line>This is to make sure some other student would not get a CLOS error.</line>
			</description>
		</item>
		<item>
			<name>Batch Student Scheduling: Solver Dashboard</name>
			<description>
				<line>A few changes (mostly caching) to make the search on the dashboard work faster, especially when returning a lot of data.</line>
			</description>
		</item>
		<item>
			<name>Grade Modes: Disclaimer</name>
			<description>
				<line>Added ability to put in a custom disclaimer for each grade mode change.</line>
				<line>Application property purdue.specreg.gradeModeDisclaimer.X, where X is the code of the grade mode change.</line>
				<line>Fixed Null exception when the student has a teaching assignment.</line>
			</description>
		</item>
		<item>
			<name>Student Status: Message</name>
			<description>
				<line>For statuses with an effective period, added ability to configure whether the automatically generated message (Your time window is between...) is to be automatically appended at the end of the status message.</line>
				<line>Sgit settings unitime.enrollment.studentStatus.timeWindowMessage, defaults to true (include the message).</line>
			</description>
		</item>
		<item>
			<name>Student Scheduling: Student Emails</name>
			<description>
				<line>Added ability to send student emails (from the online dashboard) even when the automatic notifications are disabled.</line>
				<line>Include course requests table on the email (when student can access Course Requests page).</line>
				<line>Include List of Classes and Timetable only when the student can access the Scheduling Assistant page.</line>
				<line>When the email is send from the online dashboard:
					<line>Ignore the student status (email flag)</line>
					<line>Added checkboxes: include course requests and include class schedule</line>
					<line>Remember the last used settings in the cookie (subject, cc, includes)</line>
				</line>
			</description>
		</item>
		<item>
				<name>Online Student Scheduling: Customizations</name>
				<description>
						<line>Customization holder classes rewritten to use the same sub-class (Holder).</line>
						<line>Property changes are monitored and a new provider instance is created when needed.</line>
						<line>Ensure that session-dependent application properties are considered when needed.</line>
				</description>
		</item>
		<item>
			<name>Student Scheduling Dashboard: Request Student Update</name>
			<description>
				<line>Do not limit the ability to request students updates to online student scheduling.</line>
			</description>
		</item>
		<item>
			<name>Student Scheduling: Critical Course Requests</name>
			<description>
				<line>Added ability to load critical courses from a CSV file (containing area, major, subject area, and course number).
					<line>All courses with matching academic area and major are considered critical for the student.</line>
				</line>
				<line>Added ability to use the file-based critical courses as a fallback to using degree plans.</line>
			</description>
		</item>
		<item>
			<name>Batch Student Scheduling: Priority Students</name>
			<description>
				<line>Added ability to mark some students as priority students.</line>
				<line>Priority students are scheduled first (after the critical course assignments), improving their chance of getting the courses they need.</line>
				<line>Priority students are identified by student group (Load.PriorityStudentGroupReference parameter).</line>
			</description>
		</item>
		<item>
			<name>Batch Student Scheduling: Projected Students</name>
			<description>
				<line>Added ability to filter projected students with a query (Load.ProjectedStudentQuery parameter).</line>
			</description>
		</item>
		<item>
			<name>Course Requests: Custom Validation</name>
			<description>
				<line>Display student provided notes for the requested overrides.</line>
				<line>Added ability to change these notes.</line>
				<line>Allow  note changes even when the student cannot update course requests.</line>
			</description>
		</item>
		<item>
			<name>Student Scheduling: Special Registration</name>
			<description>
				<line>Display student provided notes for the requested overrides.</line>
				<line>Added ability to change these notes.</line>
			</description>
		</item>
		<item>
			<name>Student Scheduling: Solver Reports</name>
			<description>
				<line>Export CSV: do not pritify exported reports unless explicitly stated in the report definition
					(changing the default value of the pritify parameter to false).</line>
			</description>
		</item>
		<item>
			<name>Student Scheduling Dashboard: Set Student Status </name>
			<description>
				<line>When a status is changed, update information on whether the user can use the scheduling assistant / course requests.</line>
				<line>No need to use Refresh to open the Course Requests / Scheduling Assistant dialog after the status change.</line>
			</description>
		</item>
		<item>
			<name>Published Schedule Runs: Solution Details</name>
			<description>
				<line>To remove flickering when showing mouse-over information (solution details):
					<line>No mouse-over information (solution info is too long for this).</line>
					<line>Show the solution information in a dialog instead (when a row is clicked).</line>
				</line>
			</description>
		</item>
		<item>
			<name>Student Scheduling Link (UniTime/studentScheduling.do): Default Session / Prefer Course Requests</name>
			<description>
				<line>When unitime.studentScheduling.useDefaultSession is set to false (defaults to true), the student scheduling link will not match on the default academic session. This means that it will:
					<line>Open Scheduling Assistant page if there is a session for which the student can use the page.</line>
					<line>Open Course Requests page if there is a session for which the student can use the page.</line>
				</line>
				<line>When unitime.studentScheduling.preferCourseRequests is set to true (defaults to false), the course request page take precedence.</line>
				<line>When selecting the current role, also check the sessions for which course requests are enabled (not just the ones with student scheduling enabled).</line>
			</description>
		</item>
	</category>
	<category>
		<title>Course Timetabling</title>
		<item>
				<name>Multiple Class Setup: Snapshot Limits</name>
				<description>
						<line>Added ability to edit class-level snapshot limits.</line>
						<line>When tmtbl.class_setup.edit_snapshot_limits is set to true, defaults to false.</line>
						<line>Snapshot limits are only editable after thare have been snapshots taken (offering has a snapshot timestamp).</line>
						<line>Also update snapshot limit timestamp (Class_.snapshotLimitDate) when a snapshot limit on a class is changed.</line>
						<line>Only users with Multiple Class Setup Snapshot Limits permission can edit snapshot limits.</line>
				</description>
		</item>
		<item>
				<name>Class Edit/Detail: No Date Pattern</name>
				<description>
						<line>Avoid null exception when there is no date pattern (there is no default date pattern defined and there is no date pattern set on the subpart or the class).</line>
				</description>
		</item>
	</category>
	<category>
		<title>CPSolver updated to version 1.3.185 (was 1.3.179)</title>
		<item>
				<name>Examination Timetabling: Availability</name>
				<description>
						<line>When instructor or student direct conflicts are not allowed, also do not allow for availability violations.</line>
				</description>
		</item>
		<item>
				<name>Student Scheduling: Solution Info</name>
				<description>
						<line>Added information about full sections and offerings.</line>
						<line>Added information about students with time overlaps (number of students, average overlapping minutes).</line>
				</description>
		</item>
		<item>
				<name>Student Scheduling: Advisors</name>
				<description>
						<line>Added support for student's advisor(s).</line>
				</description>
		</item>
		<item>
				<name>Student Scheduling: Priority Students</name>
				<description>
						<line>Added ability to mark some students as priority students.</line>
						<line>Priority students are scheduled first (after the critical course assignments), improving their chance of getting the courses they need.</line>
				</description>
		</item>
		<item>
				<name>Student Scheduling: Dummy Students</name>
				<description>
						<line>Improved handling of projected students.</line>
				</description>
		</item>
	</category>
	<category>
		<title>Event Management</title>
		<item>
				<name>Events: Display Conflicts</name>
				<description>
						<line>Avoid a &quot;No data type for node Xm&quot; exception when display conflicts are enabled in a non-English locale.</line>
				</description>
		</item>
	</category>
	<category>
		<title>Other Changes</title>
		<item>
				<name>JavaScript Cache Filter</name>
				<description>
						<line>Ensure that chain.doFilter does not get called two times.</line>
						<line>This fixes issue #50 (multiple menu bars and fields) when UniTime is deployed on Windows.</line>
				</description>
		</item>
	</category>
</release>

<release>
	<version>4.4.120</version>
	<release-date>Thu, 8 Aug 2019</release-date>
	<category>
		<title>Batch Student Scheduling</title>
		<item>
			<name>Database Load: Learning Community Reservations</name>
			<description>
				<line>Corrected a minor issue with a Learning Community reservation:
					<line>
						When a course is solely reserved for a single learning community,
						and there are some students already enrolled that are not matching the provided student filter,
						the reservation limit may be updated so that it is one student less than it should be.
					</line>
				</line>
			</description>
		</item>
		<item>
			<name>Log Cleaner: Published Solver Runs</name>
			<description>
				<line>Corrected the ability to automatically delete old published student scheduling solver runs during startup.</line>
				<line>Using unitime.cleanup.publishedSolutions property listing number of days after which a published run can be deleted
					(defaults to -1, no automatic delete).</line>
			</description>
		</item>
		<item>
			<name>Course/Configuration Limits</name>
			<description>
				<line>Added ability to recompute config and course limits to exclude canceled and disabled classes
					(by counting space in individual classes and decreasing the config/course limit to this number, if larger).</line>
				<line>This is only done when Load.CorrectConfigLimit is set to true (defaults to false).</line>
				<line>Student group and LC reservations that allow for disabled classes are considered (counted towards the limit).</line>
				<line>Students that are enrolled in canceled/disabled classes that are not included in the problem are considered (counted towards the limit).</line>
				<line>This is to improve performance of reservations that have no or only config-level restrictions for courses that have cancelled or disabled classes.</line>
			</description>
		</item>
		<item>
			<name>Student Status</name>
			<description>
				<line>Added ability to allow Scheduling Assistant or Course Requests page to be used by an admin (or an advisor) without allowing the student to access the page.
					<line>That is, for instance, the advisor can access the Course Requests page when Advisor Register toggle is checked regardless of the Registration toggle.</line>
					<line>That is, for instance, the admin can access the Scheduling Assistant page when Admin Enroll toggle is checked regardless of the Assistant toggle.</line>
				</line>
				<line>Added no-schedule status flag:
					<line>When set, student of such status cannot see his/her personal schedule for the given term
						(these include classes, exams, and course related events).</line>
				</line>
			</description>
		</item>
		<item>
			<name>Critical Courses: Custom Provider</name>
			<description>
				<line>Added ability to include all terms of the plan (when banner.dgw.criticalIncludeAllTerms is true, defaults to false).</line>
				<line>Added ability to include the previous two terms of the plan (when banner.dgw.criticalIncludePastTerm is true, defaults to false).</line>
			</description>
		</item>
		<item>
			<name>Use Class Snapshot Limits</name>
			<description>
				<line>Added ability to use class snapshot limit (e.g., for the test runs)
					<line>when Load.UseSnapShotLimits is set to true (defaults to false).</line>
				</line>
				<line>When a class has a snapshot limit defined and it is above the class limit &gt;&gt; use snapshot limit instead of the class limit.</line>
				<line>Compute snapshot limit on configurations and offerings (using class snapshot limits, defaulting to class limits for classes with no snapshot limit defined).</line>
 			</description>
		</item>
	</category>
	<category>
		<title>CPSolver updated to version 1.3.179 (was 1.3.176)</title>
		<item>
			<name>Student Scheduling: Enrollment</name>
			<description>
				<line>Enrollment: include reservation in the equality checking.</line>
				<line>This fixes an issue with solution restore
					(current solution containing the same enrollment, but without the reservation).</line>
			</description>
		</item>
		<item>
			<name>Batch Student Scheduling: Critical Course Requests</name>
			<description>
				<line>Improved handling of critical course requests.
					<line>Only consider critical course requests when sorting students for the Critical Courses B&amp;B phase
(students with fewer choices go first).</line>
					<line>Added two new phases that are only considering critical course requests, using backtracking and
IFS.</line>
				</line>
			</description>
		</item>
	</category>
	<category>
		<title>Custom Special Registration</title>
		<item>
			<name>Closed Section Override</name>
			<description>
				<line>When purdue.specreg.allowClosedWhenAvailable is true (default is false):
					<line>Closed section override can be requested when:
						<line>a) there is space available, but Spec Reg returns CLOS and EX-ADD errors</line>
						<line>b) closed section override is allowed on the course and Spec Reg does NOT return EX-ADD error</line>
					</line>
					<line>During extended add/drop, closed section overrides can be only requested when there is space in the section (regardless on the settings on the course).</line>
					<line>During normal registration, closed section overrides can be only requested when allowed on the course (regardless of the space available in the section).</line>
				</line>
			</description>
		</item>
		<item>
			<name>Grade Mode Changes</name>
			<description>
				<line>Added ability to request grade mode changes.</line>
			</description>
		</item>
		<item>
			<name>XE Student Enrollment</name>
			<description>
				<line>When banner.xe.keepGradeMode is set to true, make an additional API call to set the grade mode for the added section(s) to the one that was already set on the course (other sections of the same course).</line>
				<line>Honors grade modes are identified by banner.xe.resetGradeModes reg exp property (defaults to H|Q|R).
					<line>When there is a schedule change, honors grade mode is reset back to the default one (follow the grade mode of the added section).</line>
				</line>
			</description>
		</item>
	</category>
	<category>
		<title>Other Changes</title>
		<item>
			<name>Student Scheduling: Enrollment Table</name>
			<description>
				<line>Corrected column computation when switching between section numbers and external ids.</line>
			</description>
		</item>
		<item>
			<name>Class Detail/Edit: Speed Improvements</name>
			<description>
				<line>Improved speed of the Class Detail and Edit Class pages when there are lots of instructors with time preferences in the department.</line>
			</description>
		</item>
		<item>
			<name>Contact Us: Categories &amp; Attachments</name>
			<description>
				<line>Contact Us categories can now be customized using Administration &gt; Other &gt; Contact Categories page.</line>
				<line>Also, each category may have a custom email address (or addresses).</line>
				<line>It is now possible to include attachments in the Contact Us email.</line>
			</description>
		</item>
		<item>
			<name>Scheduling Subpart Suffix</name>
			<description>
				<line>When there are more than 27 subparts of the same itype, use aa, ab, ac for the suffixes instead of running out of letters.</line>
			</description>
		</item>
	</category>
</release>

<release>
	<version>4.4.114</version>
	<release-date>Tue, 25 Jun 2019</release-date>
	<category>
		<title>Student Scheduling</title>
		<item>
			<name>Published Schedule Runs</name>
			<description>
				<line>Added an ability to publish results of solver runs for the advisors and schedule deputies to see.</line>
				<line>Published solver runs are stored in the database. It is possible to get back to a particular run.</line>
				<line>It is now possible to start a test run automatically, e.g., on a nightly basis.</line>
			</description>
		</item>
		<item>
			<name>Reporting</name>
			<description>
				<line>Additional solver reports have been added on the Student Sectioning Solver Reports and the Online Student Scheduling Reports pages.
					<line>Tableau report providing information for further processing (requested / enrolled courses by individual students and their properties).</line>
					<line>Critical course requests and their assignments.</line>
				</line>
				<line>There is a new API that can be used to download a solver report of the last published run.</line>
			</description>
		</item>
		<item>
			<name>Credit Checking</name>
			<description>
				<line>Improved handling of maximum credits of a student: a student cannot get more than max credit, it is no longer needed to move course requests that are over the max credit to alternates.</line>
				<line>Added ability to maximize the number of students that have at least a minimum number of credits.</line>
			</description>
		</item>
		<item>
			<name>Student Schedule Quality</name>
			<description>
				<line>Added an ability to optimize the following criteria:
					<line>Avoid early morning and late evening times</line>
					<line>Have time for lunch</line>
					<line>Minimize overall travel</line>
					<line>Avoid holes in the schedule (prefer back-to-back)</line>
					<line>Avoid long days (aka work-day constraint)</line>
				</line>
			</description>
		</item>
		<item>
			<name>Student Preferences and Requirements</name>
			<description>
				<line>Improved performance of the solver (added ability to swap students in order to improve Selection preference).</line>
				<line>It is now possible to put a preference on the default (not-set) instructional method.</line>
				<line>It is now possible to require certain sections or instructional methods.</line>
				<line>It is possible to define who can set required preferences (student by status, admin/advisor by permissions).</line>
				<line>It is possible to filter by preferences or requirements on the dashboard.
					<line>By individual method or section</line>
					<line>Any, all met or all unmet preferences or requirements</line>
				</line>
			</description>
		</item>
		<item>
			<name>Student Scheduling Dashboard</name>
			<description>
				<line>Added pagination when showing too many students (over 500).</line>
				<line>Enrollment counts: exclude requests that are pending, canceled, and/or rejected (depending on the override filter).</line>
				<line>Student groups have been split by type (there is a column for each type, they are grouped by type in the filter as well).</line>
				<line>Added ability to select multiple courses in the filter.</line>
				<line>Corrected computation of available space on disabled (no-print) sections.</line>
				<line>Various performance improvements.</line>
			</description>
		</item>
		<item>
			<name>Reservations</name>
			<description>
				<line>Course requests that have matching (individual or student group) reservations may not be removed by the student.
					<line>Such course requests may not be allowed to be changed in priority, or no alternatives can be added to them.</line>
				</line>
				<line>Added more customizable individual and student group override reservations.</line>
				<line>Reservations can be edited without locking the offering when wait-listing is disabled.</line>
				<line>Created Learning Community reservations combining course and student group reservations.</line>
				<line>Various improvements on the Reservations page (e.g., it is now possible to filter by override type).</line>
			</description>
		</item>
		<item>
			<name>Critical Courses</name>
			<description>
				<line>Some course requests may be identified as critical.</line>
				<line>Critical course requests should take precedence (assign critical courses first, do not unassing critical course demands).</line>
				<line>Critical courses are identified by a custom class implementing the CriticalCoursesProvider interface/</line>
			</description>
		</item>
		<item>
			<name>Other Improvements</name>
			<description>
				<line>Student Status: Added session-dependent student statuses.</line>
				<line>Batch Solver: do not put students into classes that already started (added General.ClassesFixedDate solver parameter).</line>
				<line>Course Requests: Alternate Course Requests renamed to Substitute Course Requests.</line>
				<line>Course Requests: Added ability to select multiple courses in the Course Finder dialog and filter by UCC course attributes.</line>
			</description>
		</item>
	</category>
	<category>
		<title>Course Timetabling</title>
		<item>
			<name>Student Course Demands</name>
			<description>
				<line>Course Requests With Projected Last Likes: added ability to combine pre-registration (course requests) with projected last-like course enrollment data.
					<line>Course Requests take precedence, Last-Likes are weighted to fill the remaining space based on the curriculum projection rules.</line>
				</line>
				<line>Student Course Requests: Improved ability to consider course request alternatives.
					<line>Alternatives are either ignored (when StudentCourseRequests.IncludeAlternatives is false).</line>
					<line>Student weight is spread between the requested course and its alternatives, student conflicts between
						alternatives are ignored (when StudentCourseRequests.IncludeAlternatives is true, which is the default).</line>
				</line>
				<line>Curricula Requests Course Demands: improved ability to consider course request alternatives.
					<line>Alternatives are either ignored (when StudentCourseRequests.IncludeAlternatives is false).
						Course requests are included in the curriculum problem.</line>
					<line>Student weight is spread between the requested course and its alternatives, student conflicts between alternatives are
						ignored (when StudentCourseRequests.IncludeAlternatives is true, which is the default).
						While course requests (without alternatives) are included in the curriculum, true requests with alternatives
						are used in the timetabling for students that are not made up.</line>
				</line>
			</description>
		</item>
	</category>
	<category>
		<title>Event Management</title>
		<item>
			<name>Permissions</name>
			<description>
				<line>Finer control over who can see unpublished class events.
					<line>When unitime.events.hasRole.checkSessionStatusForClasses is set to true (departmental managers cannot see unpublished class events of other departments).</line>
					<line>Allow some department-dependent roles to see all class events with the new EventCanSeeUnpublishedEvents permission.</line>
				</line>
			</description>
		</item>
		<item>
			<name>Approval</name>
			<description>
				<line>When new meetings of a Special or Course-Related event are automatically approved (either due to the Approve New Meetings toggle or the event status), also add Approve action into the event notes.</line>
			</description>
		</item>
	</category>
	<category>
		<title>Administration</title>
		<item>
			<name>Data Exchange</name>
			<description>
				<line>CSV Exports: Added ability to export CSVs with custom delimiter and quotation characters.
					<line>Using csvDelimiter and csvQuatation parameters, for example: &amp;csvDelimiter=%7c&amp;csvQuotation= will add | as delimiter and no quotation marks.</line>
				</line>
				<line>Course Offering Export: export class.managingDept when a class is externally managed.</line>
				<line>Academic Session Import: Corrected import of automated tasks (do not create a script if it already exists, do not limit script length to 255 chars).</line>
				<line>Solver Load: Added ability to load solver XML in using the Data Exchange page.
					<line>No data are updated, but the appropriate solver is created and loaded in using the given XML file.</line>
				</line>
			</description>
		</item>
		<item>
			<name>Dependencies</name>
			<description>
				<line>Spring Framework upgraded to 4.3.18 (was 3.2.14)</line>
				<line>spring Security upgraded to 4.2.9 (was 3.2.8)</line>
				<line>Spring Integration upgraded to 4.3.17 (was 3.0.7)</line>
				<line>Appache Commons FileUpload updated to version 1.3.3 (was 1.3.1)</line>
				<line>Restlet Framework upgraded to 2.3.12 (was 2.3.4)</line>
				<line>Added jaxen 1.1.6 to ensure that scripts are able to create XML files (this fixes an issue ClassNotFoundException: org.jaxen.VariableContext).</line>
			</description>
		</item>
		<item>
			<name>OpenStreetMap</name>
			<description>
				<line>Use OpenStreetMap as default on rooms and buildings.</line>
				<line>Cache map tiles within UniTime.</line>
			</description>
		</item>
		<item>
			<name>Other</name>
			<description>
				<line>Sponsoring Organizations: Avoid a Hibernate cache exception when deleting a sponsoring organization that is being used.</line>
				<line>Date Patterns: Avoid throwing an error when the date pattern starts before the first month (just ignore the dates before instead).</line>
			</description>
		</item>
	</category>
</release>
</release-history>
